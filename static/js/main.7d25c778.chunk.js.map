{"version":3,"sources":["StateManagement/UserContext.js","StateManagement/NewMessagesContext.js","Components/Loader/Loader.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["UserContext","createContext","updateUserContext","UserProvider","props","useState","localStorage","getItem","currUser","setcurrUser","Provider","value","user","children","NewMessagesContext","updateNewMessages","NewMessageProvider","areNewMessagesAvailable","setareNewMessagesAvailable","Loader","className","spinning","indicator","LoadingOutlined","style","fontSize","color","spin","Legals","lazy","NotFound","HomePage","ChatRoom","MorePage","ChatsPage","LoginPage","ExternalProfilePage","ProfilePage","WelcomePage","App","useContext","fallback","exact","path","legalTitle","component","from","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7d25c778.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const UserContext = createContext();\nexport const updateUserContext = createContext();\n\nexport const UserProvider = (props) => {\n    const [currUser, setcurrUser] = useState(localStorage.getItem('currUser'));\n\n    function toggleUser(user) {\n        setcurrUser(user);\n    }\n    return (\n        <UserContext.Provider value={[currUser, setcurrUser]}>\n            <updateUserContext.Provider value={toggleUser}>\n                { props.children }\n            </updateUserContext.Provider>\n        </UserContext.Provider>\n    );\n};\n\nUserProvider.propTypes = {\n    children: PropTypes.any,\n};\n","import React, { useState, createContext } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewMessagesContext = createContext();\nexport const updateNewMessages = createContext();\n\nexport const NewMessageProvider = (props) => {\n    const [areNewMessagesAvailable, setareNewMessagesAvailable] = useState(false);\n\n    function toggleBadge(value) {\n        setareNewMessagesAvailable(value);\n    }\n    return (\n        <NewMessagesContext.Provider\n            value={[areNewMessagesAvailable, setareNewMessagesAvailable]}\n        >\n            <updateNewMessages.Provider value={toggleBadge}>\n                { props.children }\n            </updateNewMessages.Provider>\n        </NewMessagesContext.Provider>\n    );\n};\n\nNewMessageProvider.propTypes = {\n    children: PropTypes.any,\n};\n","import React from 'react';\nimport './Loader.css';\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nfunction Loader() {\n    return (\n        <div className='loader-container'>\n            <Spin\n                spinning={true}\n                indicator={<LoadingOutlined style={{ fontSize: 36, color: 'rgb(15, 20, 25)' }} spin />}\n            />\n        </div>\n    );\n}\n\nexport default Loader;\n","import React, {\n    useContext,\n    Suspense,\n    lazy,\n} from 'react';\nimport './App.css';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from 'react-router-dom';\nimport Loader from './Components/Loader/Loader';\nimport { UserContext } from './StateManagement/UserContext';\n\nconst Legals = lazy(() => import('./Screens/Legals/Legals'));\nconst NotFound = lazy(() => import('./Screens/NotFound/NotFound'));\nconst HomePage = lazy(() => import('./Screens/HomePage/HomePage'));\nconst ChatRoom = lazy(() => import('./Screens/ChatRoom/ChatRoom'));\nconst MorePage = lazy(() => import('./Screens/MorePage/MorePage'));\nconst ChatsPage = lazy(() => import('./Screens/ChatsPage/ChatsPage'));\nconst LoginPage = lazy(() => import('./Screens/LoginPage/LoginPage'));\nconst ExternalProfilePage = lazy(() => import('./Screens/ExternalProfilePage/ExternalProfilePage'));\nconst ProfilePage = lazy(() => import('./Screens/ProfilePage/ProfilePage'));\nconst WelcomePage = lazy(() => import('./Screens/WelcomePage/WelcomePage'));\n\nfunction App() {\n    const [currUser] = useContext(UserContext);\n\n    if (currUser) {\n        return (\n            <Router>\n                <Suspense fallback={<Loader/>}>\n                    <Switch>\n                        <Route exact path='/privacy-policy'>\n                            <Legals legalTitle='privacy-policy'/>\n                        </Route>\n                        <Route exact path='/welcome' component={WelcomePage}/>\n                        <Route exact path='/profile/:userId' component={ExternalProfilePage}/>\n                        <Route exact path='/profile' component={ProfilePage}/>\n                        <Route exact path='/chats/room' component={ChatRoom}/>\n                        <Route exact path='/chats' component={ChatsPage}/>\n                        <Route exact path='/more' component={MorePage}/>\n                        <Route exact path='/' component={HomePage}/>\n                        <Redirect from='*' to='/' />\n                    </Switch>\n                </Suspense>\n            </Router>\n        );\n    }\n    return (\n        <Router>\n            <Suspense fallback={<Loader/>}>\n                <Switch>\n                    <Route exact path='/privacy-policy'>\n                        <Legals legalTitle='privacy-policy'/>\n                    </Route>\n                    <Route exact path='/welcome' component={WelcomePage}/>\n                    <Route exact path='/' component={LoginPage}/>\n                    <Route component={NotFound}/>\n                </Switch>\n            </Suspense>\n        </Router>\n    );\n}\n\nexport default App;\n","/* eslint-disable comma-dangle */\n/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n/* eslint-disable operator-linebreak */\n/* eslint-disable no-undef */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n  );\n\n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n\n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log('This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://cra.link/PWA');\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n\n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log('New content is available and will be used when all '\n                + 'tabs for this page are closed. See https://cra.link/PWA.');\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n\n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n      });\n  }\n\n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          registration.unregister();\n        })\n        .catch((error) => {\n          console.error(error.message);\n        });\n    }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport 'remixicon/fonts/remixicon.css';\nimport App from './App';\nimport { UserProvider } from './StateManagement/UserContext';\nimport { NewMessageProvider } from './StateManagement/NewMessagesContext';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserProvider>\n      <NewMessageProvider>\n        <App />\n      </NewMessageProvider>\n    </UserProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}